// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using takip.Data;

#nullable disable

namespace takip.Migrations
{
    [DbContext(typeof(ProductionDbContext))]
    [Migration("20251010131605_AddMoldProductions")]
    partial class AddMoldProductions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("takip.Models.Admixture2Alias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Slot")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Slot")
                        .HasDatabaseName("IX_Admixture2Alias_Slot");

                    b.ToTable("Admixture2Aliases");
                });

            modelBuilder.Entity("takip.Models.AdmixtureAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<short>("Slot")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Slot")
                        .HasDatabaseName("IX_AdmixtureAlias_Slot");

                    b.ToTable("AdmixtureAliases");
                });

            modelBuilder.Entity("takip.Models.Aggregate2Alias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Slot")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Slot")
                        .HasDatabaseName("IX_Aggregate2Alias_Slot");

                    b.ToTable("Aggregate2Aliases");
                });

            modelBuilder.Entity("takip.Models.AggregateAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<short>("Slot")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Slot")
                        .HasDatabaseName("IX_AggregateAlias_Slot");

                    b.ToTable("AggregateAliases");
                });

            modelBuilder.Entity("takip.Models.Cement2Alias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Slot")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Slot")
                        .HasDatabaseName("IX_Cement2Alias_Slot");

                    b.ToTable("Cement2Aliases");
                });

            modelBuilder.Entity("takip.Models.CementAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<short>("Slot")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Slot")
                        .HasDatabaseName("IX_CementAlias_Slot");

                    b.ToTable("CementAliases");
                });

            modelBuilder.Entity("takip.Models.CementConsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BatchId")
                        .HasColumnType("integer");

                    b.Property<double>("ConsumedAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("ConsumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConsumptionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("MixerId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<double>("RemainingAmount")
                        .HasColumnType("double precision");

                    b.Property<int>("SiloId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConsumedAt")
                        .HasDatabaseName("IX_CementConsumption_ConsumedAt");

                    b.HasIndex("MixerId")
                        .HasDatabaseName("IX_CementConsumption_MixerId");

                    b.HasIndex("SiloId");

                    b.ToTable("CementConsumptions");
                });

            modelBuilder.Entity("takip.Models.CementRefill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("AddedAmount")
                        .HasColumnType("double precision");

                    b.Property<double>("NewAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("OperatorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("PreviousAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("RefilledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ShipmentNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SiloId")
                        .HasColumnType("integer");

                    b.Property<string>("Supplier")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("RefilledAt")
                        .HasDatabaseName("IX_CementRefill_RefilledAt");

                    b.HasIndex("SiloId");

                    b.ToTable("CementRefills");
                });

            modelBuilder.Entity("takip.Models.CementSilo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Capacity")
                        .HasColumnType("double precision");

                    b.Property<string>("CementType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("CurrentAmount")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastRefillDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MinLevel")
                        .HasColumnType("double precision");

                    b.Property<int>("SiloNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CementType")
                        .HasDatabaseName("IX_CementSilo_CementType");

                    b.HasIndex("SiloNumber")
                        .HasDatabaseName("IX_CementSilo_SiloNumber");

                    b.ToTable("CementSilos");
                });

            modelBuilder.Entity("takip.Models.ConcreteBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("EffectiveWaterKg")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsSimulated")
                        .HasColumnType("boolean");

                    b.Property<double>("LoadcellWaterKg")
                        .HasColumnType("double precision");

                    b.Property<double?>("MoisturePercent")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OperatorName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("PigmentKg")
                        .HasColumnType("double precision");

                    b.Property<string>("PlantCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("PulseWaterKg")
                        .HasColumnType("double precision");

                    b.Property<string>("RawPayloadJson")
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.Property<string>("RecipeCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<double>("TotalAdmixtureKg")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalAggregateKg")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalCementKg")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalPigmentKg")
                        .HasColumnType("double precision");

                    b.Property<double?>("WaterCementRatio")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("OccurredAt")
                        .HasDatabaseName("IX_ConcreteBatch_OccurredAt");

                    b.HasIndex("RecipeCode")
                        .HasDatabaseName("IX_ConcreteBatch_RecipeCode");

                    b.ToTable("ConcreteBatches");
                });

            modelBuilder.Entity("takip.Models.ConcreteBatch2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("EffectiveWaterKg")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsSimulated")
                        .HasColumnType("boolean");

                    b.Property<double>("LoadcellWaterKg")
                        .HasColumnType("double precision");

                    b.Property<double?>("MoisturePercent")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OperatorName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("Pigment1Kg")
                        .HasColumnType("double precision");

                    b.Property<double>("Pigment2Kg")
                        .HasColumnType("double precision");

                    b.Property<double>("Pigment3Kg")
                        .HasColumnType("double precision");

                    b.Property<double>("Pigment4Kg")
                        .HasColumnType("double precision");

                    b.Property<string>("PlantCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("PulseWaterKg")
                        .HasColumnType("double precision");

                    b.Property<string>("RawPayloadJson")
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.Property<string>("RecipeCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("yatay_kovada");

                    b.Property<double>("TotalAdmixtureKg")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalAggregateKg")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalCementKg")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalPigmentKg")
                        .HasColumnType("double precision");

                    b.Property<double?>("WaterCementRatio")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("OccurredAt")
                        .HasDatabaseName("IX_CB2_OccurredAt");

                    b.HasIndex("RecipeCode")
                        .HasDatabaseName("IX_CB2_RecipeCode");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_CB2_Status");

                    b.ToTable("ConcreteBatch2s");
                });

            modelBuilder.Entity("takip.Models.ConcreteBatch2Admixture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BatchId")
                        .HasColumnType("integer");

                    b.Property<double>("ChemicalKg")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<short>("Slot")
                        .HasColumnType("smallint");

                    b.Property<double>("WaterKg")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BatchId", "Slot")
                        .HasDatabaseName("IX_CB2M_Batch_Slot");

                    b.ToTable("ConcreteBatch2Admixtures");
                });

            modelBuilder.Entity("takip.Models.ConcreteBatch2Aggregate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BatchId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<short>("Slot")
                        .HasColumnType("smallint");

                    b.Property<double>("WeightKg")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BatchId", "Slot")
                        .HasDatabaseName("IX_CB2A_Batch_Slot");

                    b.ToTable("ConcreteBatch2Aggregates");
                });

            modelBuilder.Entity("takip.Models.ConcreteBatch2Cement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BatchId")
                        .HasColumnType("integer");

                    b.Property<string>("CementType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<short>("Slot")
                        .HasColumnType("smallint");

                    b.Property<double>("WeightKg")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.ToTable("ConcreteBatch2Cements");
                });

            modelBuilder.Entity("takip.Models.ConcreteBatchAdmixture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BatchId")
                        .HasColumnType("integer");

                    b.Property<double>("ChemicalKg")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<short>("Slot")
                        .HasColumnType("smallint");

                    b.Property<double>("WaterKg")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BatchId", "Slot")
                        .HasDatabaseName("IX_CBM_Batch_Slot");

                    b.ToTable("ConcreteBatchAdmixtures");
                });

            modelBuilder.Entity("takip.Models.ConcreteBatchAggregate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BatchId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<short>("Slot")
                        .HasColumnType("smallint");

                    b.Property<double>("WeightKg")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BatchId", "Slot")
                        .HasDatabaseName("IX_CBA_Batch_Slot");

                    b.ToTable("ConcreteBatchAggregates");
                });

            modelBuilder.Entity("takip.Models.ConcreteBatchCement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BatchId")
                        .HasColumnType("integer");

                    b.Property<string>("CementType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<short>("Slot")
                        .HasColumnType("smallint");

                    b.Property<double>("WeightKg")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.ToTable("ConcreteBatchCements");
                });

            modelBuilder.Entity("takip.Models.ConcreteBatchPigment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BatchId")
                        .HasColumnType("integer");

                    b.Property<double>("Kg")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("Percent")
                        .HasColumnType("double precision");

                    b.Property<int>("Slot")
                        .HasColumnType("integer");

                    b.Property<double>("WeightKg")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BatchId", "Slot")
                        .HasDatabaseName("IX_CBP_Batch_Slot");

                    b.ToTable("ConcreteBatchPigments");
                });

            modelBuilder.Entity("takip.Models.Mold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TotalPrints")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Molds");
                });

            modelBuilder.Entity("takip.Models.MoldProduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MoldId")
                        .HasColumnType("integer");

                    b.Property<string>("MoldName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OperatorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ProductionCount")
                        .HasColumnType("integer");

                    b.Property<int>("ShiftRecordId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MoldId");

                    b.HasIndex("ShiftRecordId");

                    b.ToTable("MoldProductions");
                });

            modelBuilder.Entity("takip.Models.Operator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Operator_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Operator_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Operator_Name");

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("takip.Models.Pigment2Alias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Slot")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Slot")
                        .HasDatabaseName("IX_Pigment2Alias_Slot");

                    b.ToTable("Pigment2Aliases");
                });

            modelBuilder.Entity("takip.Models.PigmentAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<short>("Slot")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Slot")
                        .HasDatabaseName("IX_PigmentAlias_Slot");

                    b.ToTable("PigmentAliases");
                });

            modelBuilder.Entity("takip.Models.PlcDataSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Admixture1Active")
                        .HasColumnType("boolean");

                    b.Property<double>("Admixture1ChemicalAmount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Admixture1TartimOk")
                        .HasColumnType("boolean");

                    b.Property<double>("Admixture1WaterAmount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Admixture1WaterTartimOk")
                        .HasColumnType("boolean");

                    b.Property<bool>("Admixture2Active")
                        .HasColumnType("boolean");

                    b.Property<double>("Admixture2ChemicalAmount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Admixture2TartimOk")
                        .HasColumnType("boolean");

                    b.Property<double>("Admixture2WaterAmount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Admixture2WaterTartimOk")
                        .HasColumnType("boolean");

                    b.Property<bool>("Admixture3Active")
                        .HasColumnType("boolean");

                    b.Property<double>("Admixture3ChemicalAmount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Admixture3TartimOk")
                        .HasColumnType("boolean");

                    b.Property<double>("Admixture3WaterAmount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Admixture3WaterTartimOk")
                        .HasColumnType("boolean");

                    b.Property<bool>("Admixture4Active")
                        .HasColumnType("boolean");

                    b.Property<double>("Admixture4ChemicalAmount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Admixture4TartimOk")
                        .HasColumnType("boolean");

                    b.Property<double>("Admixture4WaterAmount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Admixture4WaterTartimOk")
                        .HasColumnType("boolean");

                    b.Property<bool>("AdmixtureGroupActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("Aggregate1Active")
                        .HasColumnType("boolean");

                    b.Property<double>("Aggregate1Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Aggregate1TartimOk")
                        .HasColumnType("boolean");

                    b.Property<bool>("Aggregate2Active")
                        .HasColumnType("boolean");

                    b.Property<double>("Aggregate2Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Aggregate2TartimOk")
                        .HasColumnType("boolean");

                    b.Property<bool>("Aggregate3Active")
                        .HasColumnType("boolean");

                    b.Property<double>("Aggregate3Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Aggregate3TartimOk")
                        .HasColumnType("boolean");

                    b.Property<bool>("Aggregate4Active")
                        .HasColumnType("boolean");

                    b.Property<double>("Aggregate4Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Aggregate4TartimOk")
                        .HasColumnType("boolean");

                    b.Property<bool>("Aggregate5Active")
                        .HasColumnType("boolean");

                    b.Property<double>("Aggregate5Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Aggregate5TartimOk")
                        .HasColumnType("boolean");

                    b.Property<bool>("Aggregate6Active")
                        .HasColumnType("boolean");

                    b.Property<double>("Aggregate6Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Aggregate6TartimOk")
                        .HasColumnType("boolean");

                    b.Property<bool>("Aggregate7Active")
                        .HasColumnType("boolean");

                    b.Property<double>("Aggregate7Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Aggregate7TartimOk")
                        .HasColumnType("boolean");

                    b.Property<bool>("Aggregate8Active")
                        .HasColumnType("boolean");

                    b.Property<double>("Aggregate8Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Aggregate8TartimOk")
                        .HasColumnType("boolean");

                    b.Property<bool>("AggregateGroupActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("BatchReadySignal")
                        .HasColumnType("boolean");

                    b.Property<bool>("Cement1Active")
                        .HasColumnType("boolean");

                    b.Property<double>("Cement1Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Cement1TartimOk")
                        .HasColumnType("boolean");

                    b.Property<bool>("Cement2Active")
                        .HasColumnType("boolean");

                    b.Property<double>("Cement2Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Cement2TartimOk")
                        .HasColumnType("boolean");

                    b.Property<bool>("Cement3Active")
                        .HasColumnType("boolean");

                    b.Property<double>("Cement3Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Cement3TartimOk")
                        .HasColumnType("boolean");

                    b.Property<bool>("CementGroupActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("HorizontalHasMaterial")
                        .HasColumnType("boolean");

                    b.Property<bool>("MixerHasAdmixture")
                        .HasColumnType("boolean");

                    b.Property<bool>("MixerHasAggregate")
                        .HasColumnType("boolean");

                    b.Property<bool>("MixerHasCement")
                        .HasColumnType("boolean");

                    b.Property<bool>("MixerHasWaterLoadcell")
                        .HasColumnType("boolean");

                    b.Property<bool>("MixerHasWaterPulse")
                        .HasColumnType("boolean");

                    b.Property<double>("MoisturePercent")
                        .HasColumnType("double precision");

                    b.Property<string>("Operator")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Pigment1Active")
                        .HasColumnType("boolean");

                    b.Property<double>("Pigment1Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Pigment1TartimOk")
                        .HasColumnType("boolean");

                    b.Property<bool>("Pigment2Active")
                        .HasColumnType("boolean");

                    b.Property<double>("Pigment2Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Pigment2TartimOk")
                        .HasColumnType("boolean");

                    b.Property<bool>("Pigment3Active")
                        .HasColumnType("boolean");

                    b.Property<double>("Pigment3Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Pigment3TartimOk")
                        .HasColumnType("boolean");

                    b.Property<bool>("Pigment4Active")
                        .HasColumnType("boolean");

                    b.Property<double>("Pigment4Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Pigment4TartimOk")
                        .HasColumnType("boolean");

                    b.Property<bool>("PigmentGroupActive")
                        .HasColumnType("boolean");

                    b.Property<string>("RawDataJson")
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.Property<string>("RecipeCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("VerticalHasMaterial")
                        .HasColumnType("boolean");

                    b.Property<bool>("WaitingBunkerHasMaterial")
                        .HasColumnType("boolean");

                    b.Property<bool>("Water1Active")
                        .HasColumnType("boolean");

                    b.Property<double>("Water1Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("Water2Active")
                        .HasColumnType("boolean");

                    b.Property<double>("Water2Amount")
                        .HasColumnType("double precision");

                    b.Property<bool>("WaterGroupActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Operator")
                        .HasDatabaseName("IX_PlcDataSnapshot_Operator");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_PlcDataSnapshot_Timestamp");

                    b.ToTable("PlcDataSnapshots");
                });

            modelBuilder.Entity("takip.Models.Production", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("OperatorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StoneName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Production_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Production_IsActive");

                    b.HasIndex("OperatorName")
                        .HasDatabaseName("IX_Production_OperatorName");

                    b.HasIndex("StartTime")
                        .HasDatabaseName("IX_Production_StartTime");

                    b.ToTable("Productions");
                });

            modelBuilder.Entity("takip.Models.ProductionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<string>("StoneName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TotalCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ProductionLog_CreatedAt");

                    b.HasIndex("ProductionId")
                        .HasDatabaseName("IX_ProductionLog_ProductionId");

                    b.HasIndex("StoneName")
                        .HasDatabaseName("IX_ProductionLog_StoneName");

                    b.ToTable("ProductionLogs");
                });

            modelBuilder.Entity("takip.Models.ProductionNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FireProductCount")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ShiftId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("ProductionNotes");
                });

            modelBuilder.Entity("takip.Models.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OperatorName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("takip.Models.ShiftRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FireProductCount")
                        .HasColumnType("integer");

                    b.Property<int>("Mixer1BatchCount")
                        .HasColumnType("integer");

                    b.Property<double>("Mixer1CementTotal")
                        .HasColumnType("double precision");

                    b.Property<string>("Mixer1CementTypesJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Mixer2BatchCount")
                        .HasColumnType("integer");

                    b.Property<double>("Mixer2CementTotal")
                        .HasColumnType("double precision");

                    b.Property<string>("Mixer2CementTypesJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MoldProductionJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OperatorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ProductionDurationMinutes")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ProductionStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ShiftDurationMinutes")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ShiftEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ShiftStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StoneProductionJson")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("TotalProduction")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ShiftRecord_CreatedAt");

                    b.HasIndex("OperatorName")
                        .HasDatabaseName("IX_ShiftRecord_OperatorName");

                    b.HasIndex("ShiftStartTime")
                        .HasDatabaseName("IX_ShiftRecord_ShiftStartTime");

                    b.ToTable("ShiftRecords");
                });

            modelBuilder.Entity("takip.Models.CementConsumption", b =>
                {
                    b.HasOne("takip.Models.CementSilo", "Silo")
                        .WithMany()
                        .HasForeignKey("SiloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Silo");
                });

            modelBuilder.Entity("takip.Models.CementRefill", b =>
                {
                    b.HasOne("takip.Models.CementSilo", "Silo")
                        .WithMany()
                        .HasForeignKey("SiloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Silo");
                });

            modelBuilder.Entity("takip.Models.ConcreteBatch2Admixture", b =>
                {
                    b.HasOne("takip.Models.ConcreteBatch2", "Batch")
                        .WithMany("Admixtures")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("takip.Models.ConcreteBatch2Aggregate", b =>
                {
                    b.HasOne("takip.Models.ConcreteBatch2", "Batch")
                        .WithMany("Aggregates")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("takip.Models.ConcreteBatch2Cement", b =>
                {
                    b.HasOne("takip.Models.ConcreteBatch2", "Batch")
                        .WithMany("Cements")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("takip.Models.ConcreteBatchAdmixture", b =>
                {
                    b.HasOne("takip.Models.ConcreteBatch", "Batch")
                        .WithMany("Admixtures")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("takip.Models.ConcreteBatchAggregate", b =>
                {
                    b.HasOne("takip.Models.ConcreteBatch", "Batch")
                        .WithMany("Aggregates")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("takip.Models.ConcreteBatchCement", b =>
                {
                    b.HasOne("takip.Models.ConcreteBatch", "Batch")
                        .WithMany("Cements")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("takip.Models.ConcreteBatchPigment", b =>
                {
                    b.HasOne("takip.Models.ConcreteBatch", "Batch")
                        .WithMany("Pigments")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("takip.Models.MoldProduction", b =>
                {
                    b.HasOne("takip.Models.Mold", "Mold")
                        .WithMany()
                        .HasForeignKey("MoldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("takip.Models.ShiftRecord", "ShiftRecord")
                        .WithMany()
                        .HasForeignKey("ShiftRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mold");

                    b.Navigation("ShiftRecord");
                });

            modelBuilder.Entity("takip.Models.ProductionLog", b =>
                {
                    b.HasOne("takip.Models.Production", null)
                        .WithMany()
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("takip.Models.ProductionNote", b =>
                {
                    b.HasOne("takip.Models.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("takip.Models.ConcreteBatch", b =>
                {
                    b.Navigation("Admixtures");

                    b.Navigation("Aggregates");

                    b.Navigation("Cements");

                    b.Navigation("Pigments");
                });

            modelBuilder.Entity("takip.Models.ConcreteBatch2", b =>
                {
                    b.Navigation("Admixtures");

                    b.Navigation("Aggregates");

                    b.Navigation("Cements");
                });
#pragma warning restore 612, 618
        }
    }
}
